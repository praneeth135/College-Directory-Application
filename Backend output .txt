1. Backend Setup (Spring Boot with PostgreSQL)Step 1: Spring Boot Application SetupAfter configuring your Spring Boot project with dependencies and setting up your database connection in application.properties, running the application will start your backend server.Expected Output:When you run your Spring Boot application, the console will show the following messages if everything is set up correctly:yaml2024-09-25 12:34:56.789  INFO 1234 --- [  restartedMain] com.college.directory.CollegeApp         : Starting CollegeApp using Java 112024-09-25 12:34:56.791  INFO 1234 --- [  restartedMain] com.college.directory.CollegeApp         : The application has started successfully.2024-09-25 12:34:56.809  INFO 1234 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080Your server is now running at http://localhost:8080.Step 2: Testing API with PostmanAfter setting up the entities and repositories, you can test your APIs using Postman or cURL. For example, you can test the login API by sending a POST request to:bashPOST http://localhost:8080/api/auth/loginContent-Type: application/json{  "username": "john_doe",  "password": "password123",  "role": "STUDENT"}Expected Output:You will receive a response like this if the login is successful:json{  "role": "STUDENT",  "name": "John Doe"}If the credentials are incorrect:json{  "status": 401,  "message": "Invalid credentials"}Step 3: Database Table OutputYou can query the PostgreSQL database to verify that the user and related tables are created and populated correctly:sqlSELECT * FROM users;Expected Output:You will see records like this in the database:sqlid  | username   | role      | name       | email           | phone----+------------+-----------+------------+-----------------+-----------1   | john_doe   | STUDENT   | John Doe   | john@college.com| 1234567890